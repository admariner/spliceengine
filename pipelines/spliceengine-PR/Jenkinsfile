@Library('jenkins-shared-library')_

properties([
    parameters([
        stringParam(
         defaultValue: "${ghprbPullId}",
         description: 'Pull ID',
         name: 'pr_id'
       )
    ]),
])

node('spliceengine'){
    def artifact_values  = [
        [$class: 'VaultSecret', path: "secret/aws/jenkins/colo_jenkins", secretValues: [
            [$class: 'VaultSecretValue', envVar: 'ARTIFACT_USER', vaultKey: 'user'],
            [$class: 'VaultSecretValue', envVar: 'ARTIFACT_PASSWORD', vaultKey: 'pass']]]
    ]
    try{
        stage('Prep Node') {
                sh '''
                sudo yum install java-1.8.0-openjdk java-1.8.0-openjdk-devel git wget nmap -y
                wget https://downloads.apache.org/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz -P /tmp
                sudo tar xf /tmp/apache-maven-3.6.3-bin.tar.gz -C /opt
                sudo ln -sfn /opt/apache-maven-3.6.3 /opt/maven
                '''
        } 
        stage('Checkout') {
                // Get some code from a GitHub repository
                checkout([  
                    $class: 'GitSCM', 
                    branches: [[name: """refs/heads/${ghprbSourceBranch}"""]], 
                    doGenerateSubmoduleConfigurations: false, 
                    extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'spliceengine-ee']], 
                    submoduleCfg: [], 
                    userRemoteConfigs: [[credentialsId: '88647ede-744a-444b-8c08-8313cc137944', url: 'https://github.com/splicemachine/spliceengine-ee.git']]
                ])
                checkout([  
                    $class: 'GitSCM', 
                    branches: [[name: """refs/heads/${ghprbSourceBranch}"""]], 
                    doGenerateSubmoduleConfigurations: false, 
                    extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'spliceengine']], 
                    submoduleCfg: [], 
                    userRemoteConfigs: [[credentialsId: '88647ede-744a-444b-8c08-8313cc137944', url: 'https://github.com/splicemachine/spliceengine.git']]
                ])
        }
        stage("Build/Test"){
            // Run Maven on a Unix agent.
            wrap([$class: 'VaultBuildWrapper', vaultSecrets: artifact_values]) {
                dir('spliceengine'){
                    sh """
                    export platform=\$(echo "$ghprbCommentBody" | cut -d "@" -f2)
                    export shortbranch="\$(echo ${ghprbSourceBranch} | awk -F/ '{print \$NF}')"
                    echo "Git branch ${ghprbSourceBranch} short name is \${shortbranch}"
                    export srcver="\$(mvn org.apache.maven.plugins:maven-help-plugin:2.1.1:evaluate -Dexpression=project.version 2>&1 | egrep -v '(^\\[|Download(ed|ing):)' | grep '^[0-9]' | head -1)"
                    echo "Maven project version is \${srcver}"
                    export newsrcver="\${srcver}-${BUILD_NUMBER}-\${shortbranch}"
                    echo "New Maven version is \${newsrcver}"
                    echo "Using Maven versions plugin and in-line sed to set version to \${newsrcver}" 
                    mvn versions:set -DnewVersion="\${newsrcver}" -Pcore,\${platform},ee -l /dev/null
                    mvn versions:commit
                    echo "Saving branch and version info to branch.env"
                    echo "export shortbranch=\${shortbranch}" > branch.env
                    echo "export srcver=\${srcver}" >> branch.env
                    echo "export newsrcver=\${newsrcver}" >> branch.env
                    echo "\${newsrcver}" > version.txt
                    mvn -B -e --fail-at-end clean -DskipTests
                    cp pipelines/spot-bugs/template/settings.xml ~/.m2/settings.xml
                    sed  -i "s/REPLACE_USER/$ARTIFACT_USER/" ~/.m2/settings.xml
                    sed  -i "s/REPLACE_PASS/$ARTIFACT_PASSWORD/" ~/.m2/settings.xml

                    if [[ "\$platform" =~ ^mem ]] ; then
                        profiles="core,mem"
                    elif [[ "\$platform" =~ ^cdh ]] ; then
                        profiles="mem,core,\$platform,ee,parcel"
                    elif [[ "\$platform" =~ ^hdp ]] ; then
                        profiles="mem,core,\$platform,ee,hdp_service"
                    elif [[ "\$platform" =~ ^hdp ]] ; then
                        profiles="mem,core,\$platform,ee,hdp_service"
                    else
                        profiles="mem,core,\${platform},ee,installer"
                    fi

                    echo "building \${profiles} for \$platform"

                    MAVEN_OPTS="-Xms64m -XX:MinHeapFreeRatio=10 -XX:MaxHeapFreeRatio=30 -Dorg.slf4j.simpleLogger.showDateTime=true -Dorg.slf4j.simpleLogger.dateTimeFormat=YYYY-MM-dd|HH:mm:ss,SSS"

                    mvn \
                    -B \
                    -f pom.xml \
                    -P\$profiles \
                    -D\$platform \
                    -Djenkins.build.number=${BUILD_NUMBER} \
                    -Dexcluded.categories=com.splicemachine.test.SlowTest \
                    -Dmaven.test.redirectTestOutputToFile=true \
                    clean install
                    """
                }
            }
        }
    } catch (any) {
        // if there was an exception thrown, the build failed
        currentBuild.result = "FAILED"
        throw any

    } finally {
        archiveArtifacts artifacts: '**,spliceengine/platform_it/target/*.log, spliceengine/target/platform_it/*log.*, spliceengine/platform_it/*.log, spliceengine/platform_it/*log.*, spliceengine/platform_it/target/SpliceTestYarnPlatform/**/*, spliceengine/mem_sql/target/*.log', allowEmptyArchive: true
        // success or failure, always send notifications
        notifyBuild(currentBuild.result)
    }
}

